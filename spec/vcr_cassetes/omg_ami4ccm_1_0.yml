---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/AMI4CCM/1.0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 03 Feb 2023 03:13:36 GMT
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - max-age=86400, public, s-maxage=3600
      Vary:
      - accept-encoding
      Content-Language:
      - en-US
      Cf-Cache-Status:
      - DYNAMIC
      Server-Timing:
      - cf-q-config;dur=6.0000020312145e-06
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v3?s=C5VaoMoBuzu%2FnFkG1DN16r232h1SmPK0YRJNfPCmqHBmF6drVHN9Feg%2Fq1DaAixREv%2BLhftVuSm3B3omryb8UuZjnyWl2auWZr9Ak9dlmSfKY0RIwN6OsivwqntyXZCv9gD7kJmaskvX"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'
      Server:
      - cloudflare
      Cf-Ray:
      - 7937fdd7eeec3b83-IAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 03 Feb 2023 03:13:35 GMT
recorded_with: VCR 6.1.0
