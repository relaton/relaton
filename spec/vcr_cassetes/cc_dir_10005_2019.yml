---
http_interactions:
- request:
    method: get
    uri: https://standards.calconnect.org/relaton/index.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - binary/octet-stream
      Content-Length:
      - '178674'
      Connection:
      - keep-alive
      Last-Modified:
      - Tue, 23 Jun 2020 03:53:57 GMT
      Server:
      - AmazonS3
      Date:
      - Tue, 02 Aug 2022 15:02:37 GMT
      Etag:
      - '"8afffdb652d26176976bfe87c344ccbf"'
      Vary:
      - Accept-Encoding
      X-Cache:
      - RefreshHit from cloudfront
      Via:
      - 1.1 ea5596dd88f15ba5d3f5b74a7ae8d49e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - BUD50-C1
      X-Amz-Cf-Id:
      - FkFDTlJ3R2IJLKII75jPKcUXXURCGUGsgWGzUPBQGGcn1rdJ9nROZA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 02 Aug 2022 15:02:36 GMT
- request:
    method: get
    uri: https://standards.calconnect.org/csd/cc-10005.rxl
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.10.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - binary/octet-stream
      Content-Length:
      - '924'
      Connection:
      - keep-alive
      Date:
      - Tue, 02 Aug 2022 15:02:38 GMT
      Last-Modified:
      - Tue, 23 Jun 2020 03:53:51 GMT
      Etag:
      - '"a11e39b56e56179e8559a626fa0c798f"'
      Server:
      - AmazonS3
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a61bf012d6705172c9b3467994159b56.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - BUD50-C1
      X-Amz-Cf-Id:
      - vzxB5Is_8ywdy-hNVytGLuv1TxDdD8bp6hK5ijWrd4C23odoFUWjRA==
    body:
      encoding: UTF-8
      string: |-
        <bibdata type="standard">
        <title language="en" format="text/plain">Guidelines for the implementation of the CalConnect patent policy</title>
        <docidentifier type="csd">CC/DIR 10005:2019</docidentifier>
        <docnumber>10005</docnumber>
        <date type="published">
        <on>2019-06-13</on>
        </date>
        <contributor>
        <role type="author"/>
        <organization>
        <name>CalConnect</name>
        </organization>
        </contributor>
        <contributor>
        <role type="publisher"/>
        <organization>
        <name>CalConnect</name>
        </organization>
        </contributor>
        <edition>1</edition>
        <version>
        <revision-date>2019-06-13</revision-date>
        </version>
        <language>en</language>
        <script>Latn</script>
        <status>
        <stage>published</stage>
        </status>
        <copyright>
        <from>2019</from>
        <owner>
        <organization>
        <name>CalConnect</name>
        </organization>
        </owner>
        </copyright>
        <ext>
        <doctype>directive</doctype>
        <editorialgroup>
        <technical-committee>PUBLISH</technical-committee>
        </editorialgroup>
        </ext>
        </bibdata>
  recorded_at: Tue, 02 Aug 2022 15:02:37 GMT
recorded_with: VCR 6.1.0
